[project]
description = "Data scripts and tools for Ward Wise ChiHackNight project"
name = "ward-wise-data-analysis"
version = "0.0.1"
dependencies = [
	"geopandas",
    "numpy",
    "pandas",
    "pypdf2",
    "requests",
    "shapely"
]

[project.scripts]
extract_ward_spending_data_from_pdfs = "src.scripts.ward_spending_pdf_data_extraction:extract_from_files"
postprocess_and_combine_ward_spending_data = "src.scripts.ward_spending_post_processing:postprocess_and_combine_data"
generate_ward_spending_geocoding = "src.scripts.ward_spending_geocoding:generate_ward_spending_geocoding"
generate_bikeway_installations_geocoding = "src.scripts.bike_geocoding:generate_bikeway_installations_geocoding"

[build-system]
requires = [
    "setuptools>=68.0.0",
]

[tool.setuptools.packages.find]
where = ["."]
exclude = [
    "tests*",
]

[tool.pytest.ini_options]
markers = [
    "integration_test: tests that actually hit external systems",
]

[tool.ruff]
line-length = 100
exclude = [
    ".git",
    ".mypy_cache",
    ".ruff_cache",
    "_build",
    "build",
    "dist",
    ".venv",
    "venv",
]
target-version = "py312"

[tool.ruff.lint]
select = [
     # flake8-builtins
    "A",
    # flake8-bugbear
    "B",
    # flake8-comprehensions
    "C4",
    # pycodestyle
    "E",
    # pyflakes
    "F",
    # isort
    "I",
    # flake-8-unused-arguments
    "ARG",
    # perflint
    "PERF",
    # pygrep-hooks
    "PGH",
    # pylint
    "PL",
    # ruff-exclusive checks
    "RUF",
    # flake8-simplify
    "SIM",
]


ignore = [
    # line-too-long
    "E501",
    # (pylint) too-many-return-statements
    "PLR0911",
    # (pylint) too-many-branches
    "PLR0912",
    # (pylint) magic-value
    "PLR2004"

]
